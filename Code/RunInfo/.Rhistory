{
x <- rgamma(n, param[1], param[2]) # parameter 1 is shape, param2 is rate
y[i] <- mean(x)
}
}
if (dist == "binom")
{
for (i in 1:m)
{
x <- rbinom(n, param[1], param[2]) # param 1 is size, param 2 is prob
y[i] <- mean(x)
}
}
if (dist == "poisson"){
for (i in 1:m)
{
x <- rpois(n, param[1])
y[i] <- mean(x)
}
}
return(y)
}
CLT(30, c(2, 3), "gamma")
CLT(30, c(2, 3), 500, "gamma")
y <- CLT(30, c(2, 3), 500, "gamma")
mean(y)
CLT <- function(dist="exp", n, param, nsim)
# n: number of samples
# param: corresponding parameters, can be a vector
# nsim: number of simulations
{
y <- rep(0, nsim) # initialization
if (dist== "exp"){  # for exponential distribution
for ( i in 1: m){
x <- rexp(n, param[1]) # generate exponential distributed number
y[i] <- mean(x)  # calculate the mean
}
}
if (dist == "chisq")
{
for (i in 1:m)
{
x <- rchisq(n, param[1]) # chi-square distribution with df of param[1]
y[i] <- mean(x)
}
}
if (dist == "gamma")
{
for (i in 1:m)
{
x <- rgamma(n, param[1], param[2]) # parameter 1 is shape, param2 is rate
y[i] <- mean(x)  # formula mean(x) = param[1]/param[2]
}                 # var(x) = param[1]/param[2]^2
}
if (dist == "binom")
{
for (i in 1:m)
{
x <- rbinom(n, param[1], param[2]) # param 1 is size, param 2 is prob
y[i] <- mean(x)
}
}
if (dist == "poisson"){
for (i in 1:m)
{
x <- rpois(n, param[1])
y[i] <- mean(x)
}
}
return(y)
}
y <- CLT("gamma", 30, c(2, 3), 500 )
CLT <- function(dist="exp", n, param, nsim)
# n: number of samples
# param: corresponding parameters, can be a vector
# nsim: number of simulations
{
y <- rep(0, nsim) # initialization
if (dist== "exp"){  # for exponential distribution
for ( i in 1: nsim){
x <- rexp(n, param[1]) # generate exponential distributed number
y[i] <- mean(x)  # calculate the mean
}
}
if (dist == "chisq")
{
for (i in 1:nsim)
{
x <- rchisq(n, param[1]) # chi-square distribution with df of param[1]
y[i] <- mean(x)
}
}
if (dist == "gamma")
{
for (i in 1:nsim)
{
x <- rgamma(n, param[1], param[2]) # parameter 1 is shape, param2 is rate
y[i] <- mean(x)  # formula mean(x) = param[1]/param[2]
}                 # var(x) = param[1]/param[2]^2
}
if (dist == "binom")
{
for (i in 1:nsim)
{
x <- rbinom(n, param[1], param[2]) # param 1 is size, param 2 is prob
y[i] <- mean(x)
}
}
if (dist == "poisson"){
for (i in 1:nsim)
{
x <- rpois(n, param[1])
y[i] <- mean(x)
}
}
return(y)
}
y <- CLT("gamma", 30, c(2, 3), 500 )
mean(y)
y <- CLT("poisson", 5, 2, 1000)
mean(y)
var(y)
y <- CLT("poisson", 50, 2, 1000)
mean(y)
var(y)
hist(y)
hist(y)
x<-seq(1.3,2.8,0.01)
curve(dnorm(x, mean=mean(grades), sd=sd(grades)), add=TRUE)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE)
hist(y)
x<-seq(1.3,2.8,0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE)
hist(y, prob=TRUE)
x<-seq(1.3,2.8,0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2)
hist(y, prob=TRUE)
x<-seq(1.3,2.8,0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
hist(y, prob=TRUE)
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
y <- CLT("gamma", 30, c(2, 3), 500 )
hist(y, prob=TRUE)
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
hist(y, prob=TRUE, main="histogram of Poisson mean")
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
x1 <- rpois(100, 3)
x2 <- rpois(100, 5)
x3 <- rpois(100, 4)
y <- x1 + x2 + x3
c(mean(y), var(y))
seq(1940, 2010, by=10)
x <- runif(10000)
y <- runif(x)
mean(y)
var(y)
x <- runif(10000)
y <- runif(x)
mean(y)
x <- runif(10000)
y <- runif(x)
mean(y)
x <- runif(10000)
y <- runif(x)
mean(y)
x <- runif(10000)
y <- runif(x)
mean(y)
## guest lecture
## central limit theorem says: given certain conditions, the mean of a sufficiently
## large number of independent identical random variables, will be approximately normally
## distributed.
# exponential distribution
CLT <- function(dist="exp", n, param, nsim)
# n: number of samples
# param: corresponding parameters, can be a vector
# nsim: number of simulations
{
y <- rep(0, nsim) # initialization
if (dist== "exp"){  # for exponential distribution
for ( i in 1: nsim){
x <- rexp(n, param[1]) # generate exponential distributed number
y[i] <- mean(x)  # calculate the mean
}
}
if (dist == "chisq")
{
for (i in 1:nsim)
{
x <- rchisq(n, param[1]) # chi-square distribution with df of param[1]
y[i] <- mean(x)
}
}
if (dist == "gamma")
{
for (i in 1:nsim)
{
x <- rgamma(n, param[1], param[2]) # parameter 1 is shape, param2 is rate
y[i] <- mean(x)  # formula mean(x) = param[1]/param[2]
}                 # var(x) = param[1]/param[2]^2
}
if (dist == "binom")
{
for (i in 1:nsim)
{
x <- rbinom(n, param[1], param[2]) # param 1 is size, param 2 is prob
y[i] <- mean(x)
}
}
if (dist == "poisson"){
for (i in 1:nsim)
{
x <- rpois(n, param[1])
y[i] <- mean(x)
}
}
return(y)
}
y <- CLT("gamma", 30, c(2, 3), 500 )
y <- CLT("poisson", 50, 2, 1000)
hist(y, prob=TRUE, main="histogram of Poisson mean")
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
dist <- "gamma"
y <- CLT(dist, 30, c(2, 3), 500 )
dist <- "gamma"
y <- CLT(dist, 30, c(2, 3), 500 )
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean")
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean"))
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean"))
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
dist <- "binom"
n <- 30
param <- c(10, 0.3)
nsim <- 500
y <- CLT(dist, n, param, nsim )
# y <- CLT(dist, 50, 2, 1000)
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean"))
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
rm(list=ls())
?rexp
dist <- "binom"
CLT <- function(dist="exp", n, param, nsim)
# n: number of samples
# param: corresponding parameters, can be a vector
# nsim: number of simulations
{
y <- rep(0, nsim) # initialization
if (dist== "exp"){  # for exponential distribution
for ( i in 1: nsim){
x <- rexp(n, param[1]) # generate exponential distributed number
y[i] <- mean(x)  # calculate the mean
}
}
if (dist == "chisq")
{
for (i in 1:nsim)
{
x <- rchisq(n, param[1]) # chi-square distribution with df of param[1]
y[i] <- mean(x)
}
}
if (dist == "gamma")
{
for (i in 1:nsim)
{
x <- rgamma(n, param[1], param[2]) # parameter 1 is shape, param2 is rate
y[i] <- mean(x)  # formula mean(x) = param[1]/param[2]
}                 # var(x) = param[1]/param[2]^2
}
if (dist == "binom")
{
for (i in 1:nsim)
{
x <- rbinom(n, param[1], param[2]) # param 1 is size, param 2 is prob
y[i] <- mean(x)
}
}
if (dist == "poisson"){
for (i in 1:nsim)
{
x <- rpois(n, param[1])
y[i] <- mean(x)
}
}
return(y)
}
dist <- "binom"
n <- 50
param <- c(20, 0.05)
nsim <- 10000
y <- CLT(dist, n, param, nsim )
head(y, 20)
20*0.05
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean"))
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
x
?dnorm
mean(y)
sd(y)
dist <- "chisq"
n <- 5
param <- c(2)
nsim <- 10000
y <- CLT(dist, n, param, nsim )
hist(y, prob=TRUE, main=paste("histogram of", dist,  "mean"))
x<-seq(min(y),max(y),0.01)
curve(dnorm(x, mean=mean(y), sd=sd(y)), add=TRUE, lty=2, col="red")
x1 <- rchisq(1000, 2)
hist(x1)
mean(y)
x1 <- rpois(100, 3)
x2 <- rpois(100, 5)
x3 <- rpois(100, 4)
y <- x1 + x2 + x3
c(mean(y), var(y))
x <- runif(10000)
hist(x)
y <- runif(10000, 0, x)
hist(y)
c(mean(y), var(y))
x <- runif(10000)
y <- runif(10000, 0, x)
c(mean(y), var(y))
x <- runif(10000)
y <- runif(10000, 0, x)
c(mean(y), var(y))
x <- rnorm(100, 3, 1)
x <- rnorm(100, 3, 1)
y <- 0.3*x + 5
lm(y~x)
x <- seq(1:100)
x
y <- 0.3*x + 5 + rnorm(0, 5)
y
y <- 0.3*x + 5 + rnorm(100, 0, 5)
y
plot(x, y)
lm(y~x)
a <- lm(y~x)
abline(a)
summary(a)
300－（297.44-8.99）
300-(297.44-8.99)
x <- runif(100,1,100)
y <- 0.3*x + 5 + rnorm(100, 0, 5)
plot(x, y)
a <- lm(y~x)
summary(a)
abline(a)
x <- runif(10000)
y <- runif(10000, 0, x)
c(mean(y), var(y))
1/9
1/9-1/16
library(MASS)
fractions(1/9-1/16)
x <- runif(10000)
y <- runif(10000, 0, x)
c(mean(y), var(y))
x <- runif(10000)
y <- runif(10000, 0, x)
c(mean(y), var(y))
source( "http://www.bioconductor.org/biocLite.R" )
biocLite("BiocUpgrade")
biocLite( c("ShortRead","DESeq", "edgeR") )
biocLite("BiocUpgrade")
1-2*(1-pnorm(2))
32/63
18*0.9
GSE37159 <- read.table("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Data/arab/GSE/GSE37159.txt",fill=T, header=T)
GSE37159.Rsubread <- read.table("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Data/arab/RAW/GSE37159.Rsubread.txt",fill=T, header=T)
GSE37159.Rsubread <- read.table("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Data/arab/Rsubread/GSE37159.Rsubread.txt",fill=T, header=T)
head(GSE37159)
head(GSE37159.Rsubread)
6400 －1950 －1780
6400 －1950 －1780
6400－1950 －1780
6400-1950-1780
1284 +2337
615=766
615=766
615+766
compareData <- function(dat1, dat2)
{
mer <- merge(dat1, dat2, by ="Gene")
nsamp <- dim(dat2)[2]-1
r.pearson <- r.spearman <- rep(0, nsamp)
coe1 <- coe2 <-  rep(0, nsamp)
for ( i in 1 :nsamp)
{
x <- mer[, i + 1]
y <- mer[, i + 1 + nsamp]
r.pearson[i] <- cor(x, y)
r.spearman[i] <- cor(x, y, method="spearman")
l <- lm(y~x)
coe1[i] <- as.numeric(l$coefficients[2]) # slope
coe2[i] <- as.numeric(l$coefficients[1])
# slope ranging from 1.05 to 1.06
}
ret.list <- list(mergeData= mer, r.pear= r.pearson,
r.spear = r.spearman, intercept=coe2, slope=coe1)
return(ret.list)
}
dat.name <- "GSE51772"
dat1.path <- paste("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Data/arab/GSE/",
dat.name, ".txt", sep="")
head(dat1)
dat1 <- read.table(dat.path, fill=T, header=T)
head(dat1)
dat1 <- read.table(dat1.path, fill=T, header=T)
head(dat1)
dat2.path <- paste("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Data/arab/Rsubread/",
dat.name, ".Rsubread.txt", sep="")
dat2 <- read.table(dat2.path, fill=T, header=T)
dat2 <- data.frame(Gene=row.names(dat2), dat2)
head(dat2)
xx <- compareData(dat1,dat2)
xx$slope
n <- 20000
N <- 20000
n <- 2000
K <- 100
k <- 100
choose(K, k)*choose(N-K, n-k)/choose(N, n)
choose(K, k)
choose(N-K, n-k)
1.1^15
1.2^14
rm(list=ls())
ls
80 + 15.53 + 15 + 2 + 32.27 +31.78 +5 +164 +24.95 +50.99
+ 13.17 + 16.48 + 17.40 +16.98 + 30 + 14.10 + 0.37 + 0.37 + 102.54
80 + 15.53 + 15 + 2 + 32.27 +31.78 +5 +164 +24.95 +50.99
+ 13.17 + 16.48 + 17.40 +16.98 + 30 + 14.10 + 0.37 + 0.37 + 102.54
80 + 15.53 + 15 + 2 + 32.27 +31.78 +5 +164 +24.95 +50.99 + 13.17 + 16.48 + 17.40 +16.98 + 30 + 14.10 + 0.37 + 0.37 + 102.54
20.76 + 12.66 +79.60 + 20.49 + 92.39 + 50.39 + 38 +  78.53
20.76 + 12.66 +79.60 + 20.49 + (92.39 + 50.39 )/2 + 38 +  78.53
(92.39 + 50.39 )/2
80 + 15.53 + 15 + 2 + 32.27 +31.78 +5 +164 +24.95 +50.99 + 13.17 + 16.48 + 17.40 +16.98 + 30 + 14.10 + 0.37 + 0.37 + 102.54
20.76 + 12.66 +79.60 + 20.49 + (92.39 + 50.39 )/2 + 38 +  78.53
(92.39 + 50.39 )/2
632.93/2
x <- 80 + 15.53 + 15 + 2 + 32.27 +31.78 +5 +164 +24.95 +50.99 + 13.17 + 16.48 + 17.40 +16.98 + 30 + 14.10 + 0.37 + 0.37 + 102.54
y <- 20.76 + 12.66 +79.60 + 20.49 + (92.39 + 50.39 )/2 + 38 +  78.53
z <- (92.39 + 50.39 )/2
f <- 10.68
x - (x + y)/2
y - ( x + y)/2
x - (x + y)/2 - z + f
y <- 20.76 + 12.66 +79.60 + 20.49 + (92.39 + 50.39 )/2 + 38 +  78.53
y
x-y
x-y+f
x/2
y/2
x/2-y/2
x/2-y/2+f
x/2-y/2+f-z
x/2-y/2+f-71.39
11548 - 1950 -1780-15
11548 - 1950 -1780-15-900
6903 -6000 + 247 -10000 + 8400 + 1200 - 315
350 - (39.92 + 54.99)/2 - 7.49*3
12074 -(5900 + 1700 + 1500)-1950 -1780
12074 -(5900 + 1700 + 1500)-1950 -1780 + 1174 + 256 + 200
12074 -(5900 + 1700 + 1500)-1950 -1780 + 1174 + 256 + 200 + 120 + 125 + 90
3930 + 1307 + 1305 + 615 + 766
3930 + 1307 + 1305 + 615 + 766-3930
6000-168
766 + 615 + 1305 + 3930
6616-5832
install.packages("GenomicFeatures")
library(GenomicFeatures)
source("http://bioconductor.org/biocLite.R")
biocLite("GenomicFeatures")
library(GenomicFeatures)
log(0.05)
install.packages("devtools")
library(Rsubread)
library(edgeR)
library(Rsubread)
datafile <- "GSE41432"
setwd("/home/zhuob/protocol/Rsubread")
setwd("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Code/RunInfo")
read.file <- paste(datafile, "SraRunInfo.csv", sep="" )
RunInfo <- read.csv(read.file, stringsAsFactors=F)
read.file
datafile <- "GSE32216"
setwd("/Users/Bin/Dropbox/Zhuo/Research/Project2014/Code/RunInfo")
read.file <- paste(datafile, "SraRunInfo.csv", sep="" )
RunInfo <- read.csv(read.file, stringsAsFactors=F)
id <- which(RunInfo$LibraryStrategy=="RNA-Seq" & RunInfo$LibrarySelection=="cDNA"
&RunInfo$LibraryLayout=="SINGLE")
RunInfo <- RunInfo[id, ]
dim(RunInfo)
(fs <- basename(RunInfo$download_path))
filepath <- RunInfo$download_path
fsname <- RunInfo$SampleName
fastq.name <- RunInfo$Run
layout <- RunInfo$LibraryLayout
View(RunInfo)
getwd
getwd()
